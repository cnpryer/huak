name: Build and Publish to PyPI
# see https://github.com/messense/crfs-rs/blob/main/.github/workflows/Python.yml


on:
  release:
    types: [published]

# This workflow builds huak as pip/python 'wheels' which are platform and python version specific.
# when installed via PyPI, Pip will download the wheel for the user's system if we support it through this workflow.
jobs:
  # The 'linux' job uses the manylinux docker image to build wheels that can be used by most linux distros.
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # These are the CPU architectures...
        target: [ x86_64, i686 ]
        # and python versions we'll support on linux.
        # see https://github.com/pypa/manylinux for info on supported python versions.
        py-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v3
      - name: build wheels
        # see example at https://github.com/messense/crfs-rs/blob/main/.github/workflows/Python.yml
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          maturin-version: latest
          # Maturin's default command is 'build',
          # and target supported python version ('-i' flag) and store in dist, so we can upload all wheels at same time.
          args: --release -i ${{ matrix.py-version }} --out dist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist


  # Windows job is pretty straight forward, no containers. Runs on Windows, for Windows.
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [ x64, x86 ]
        py-version: [ '3.7', '3.8', '3.9', '3.10' ]
    steps:
      - uses: actions/checkout@v2
        # since we don't have a requirements.txt file in the project root, setup-python needs one.
      - name: check requirements.txt
        run: |
          if (!(Test-Path requirements.txt))
          {
          New-Item -itemType File -Name requirements.txt
          }
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          maturin-version: latest
          args: --release -i ${{ matrix.py-version }} --out dist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        # since we don't have a requirements.txt file in the project root, setup-python needs one.
      - name: check requirements.txt
        run: |
          if [[ ! -f requirements.txt ]]; then
            touch requirements.txt
          fi
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build wheels - universal2
        uses: messense/maturin-action@v1
        with:
          args: --release --universal2 --out dist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist


  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ macos, linux, windows ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
          # use 'twine upload --repository testpypi --skip-existing *' to upload to http://test.pypi.org
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *